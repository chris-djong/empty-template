"""
Django settings for template project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import datetime
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Import the environemntal variables
dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# The secret key is used to hash the password reset and email verification tokens for example
SECRET_KEY = os.environ['SECRET_KEY']
PASSWORD_RESET_TIMEOUT = 3600   # seconds / how long tokens generated using the default_token_generator are valid / currently these tokens are used for email verification and password reset

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['IS_DEV']
 
ALLOWED_HOSTS = ['*']  # whenever DEBUG is set to false the django website does not serve application to non listed domains 

# Whiteliste domains for API
# during developmment enable all for localhost
CORS_ORIGIN_ALLOW_ALL = True  # only allow whitelisted connections
CORS_ALLOWED_ORIGINS = ['<addWebsiteHere>']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.gis',  # fir postgres related fields
    'corsheaders',  # enable cross origin resource sharing
    'rest_framework',
    'api.users',
    'api.chat',
    'api.emails',
    'api.stripe',
    'api.settings'
]


DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['api/emails/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Email settings
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'addDateBaseNameHere',
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': 'localhost',
        'PORT': '51995',
    }
}

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAdminUser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Used to open the keys used for the rsa algorithm


def get_file(file_url):
    if os.path.isfile(file_url):
        with open(file_url) as f:
            return f.read()
    else:
        print('Could not find file')
        print(os.path.join(os.getcwd(), file_url))
        return None


SIMPLE_JWT = {
    # how long the access token is valid
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=5),
    # how long the refresh token is valid
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    # give a new refresh token each time a new token has been submitted (i guess this ensure highjacking of refresh tokens?)
    'ROTATE_REFRESH_TOKENS': True,
    # wheneever a refresh token has been used it will be blacklisted (this is also for highjacking i of refresh tokens i guess?)
    'BLACKLIST_AFTER_ROTATION': True,
    # NOTE: Updating last_login will dramatically increase the number of database transactions.
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'RS256',
    # Todo: remove from settings and store in read only file
    'SIGNING_KEY': get_file('./core/auth_keys/id_rsa'),
    'VERIFYING_KEY': get_file('./core/auth_keys/id_rsa.pub'),
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,  # used to give some margin to the expiration time / integer for seconds or datetime object

    'AUTH_HEADER_TYPES': 'Bearer',  # the prefix of the jwt token
    # the name of the header that sends the token / should be prefixed by HTTP_
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',   # the field that is used to identify users
    'USER_ID_CLAIM': 'user_id',  # how to user identifying field is named
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    # claim name for tokens to retrieve them and see which ones are blacklisted etc
    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),
}


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Luxembourg'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# All of these are required for the static files of the admin page #####
STATIC_URL = '/static/'
# The static files are copied to this folder after the collectstatic command is run
STATIC_ROOT = '/static/'
# These are the folder which the collectstatic command searches in
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'core/static'),
)
